# Build pipeline for Master Branch

# This sets $(Build.BuildNumber)
name: 1.3.$(Rev:r)

# Set project names here
variables:
  projectName: SmartDi.csproj
  testProjectName: SmartDiTests.csproj

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
## - Build Project -
# Implicit Restore is run before build
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/$(projectName)'
    arguments: '--configuration Debug'

## - Run Unit Tests -
#- task: DotNetCoreCLI@2
#  inputs:
#    command: 'build'
#    projects: '**/$(testProjectName)'
#    arguments: '--configuration Release'

- task: NuGetCommand@2
  displayName: 'Restore packages for Unit Tests'
  inputs:
    command: 'restore'
    restoreSolution: '**/$(testProjectName)'
    feedsToUse: 'select'
    vstsFeed: '86153590-b7da-4504-b416-f06a4b16a355'
    versioningScheme: byBuildNumber


- task: MSBuild@1
  displayName: 'Build Unit Tests project'
  inputs:
    solution: '**/$(testProjectName)'
    configuration: 'Debug'
    msbuildArguments: '/t:restore;clean;build'


- task: DotNetCoreCLI@2
  displayName: 'Run unit tests with code coverage'
  inputs:
    command: 'test'
    projects: '**/$(testProjectName)'
    arguments: '--no-build --configuration Debug /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g --global dotnet-reportgenerator-globaltool'

- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines -reporttypes:Badges
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

## - Pack -
# Package with -pre version for /beta
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/$(projectName)'
    configuration: 'Release'
    packDirectory: '$(Build.ArtifactStagingDirectory)/beta'
    nobuild: true
    versioningScheme: 'off'
    buildProperties: 'PackageVersion=$(Build.BuildNumber)-pre'

# Package public version off same build
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/$(projectName)'
    configuration: 'Release'
    packDirectory: '$(Build.ArtifactStagingDirectory)/public'
    nobuild: true
    versioningScheme: 'off'
    buildProperties: 'PackageVersion=$(Build.BuildNumber)'


- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
